.mode csv
.import favorites.csv favorites;
SELECT * FROM favorites;

AVG
COUNT
DISTINCT
LOWER
MAX
MIN
UPPER

SELECT DISTINCT(language) FROM favorites;
SELECT COUNT(DISTINCT(language)) FROM favorites;
SELECT COUNT(DISTINCT(language)) AS n FROM favorites;

WHERE
LIKE 
ORDER BY
LIMIT
GROUP BY

SELECT COUNT(*) FROM favorites WHERE language = 'C';
SELECT COUNT(*) FROM favorites WHERE language = 'C' AND problem = 'Mario';
SELECT language, COUNT(*) FROM favorites GROUP BY language;

INSERT INTO favorites (language, problem) VALUES('SQL', 'fifyville')

WHERE is important;
predicate is important rules to not delete all table;

BLOB
INTEGER
NUMERIC
REAL
TEXT

constraints
NOT NULL
UNIQUE

PRIMARY KEY
FOREGIN KEY

SELECT title FROM shows WHERE id IN (SELECT show_id FROM genres WHERE genre = 'Comedy');

SELECT * FROM people WHERE name = 'Steve Carell';

SELECT * FROM stars WHERE person_id = 136797;
SELECT title FROM shows WHERE id = 118420;

SELECT * FROM people WHERE name = 'Steve Carrel';

SELECT * FROM stars WHERE person_id = (SELECT id FROM people WHERE name = 'Steve Carell');

SELECT show_id FROM stars WHERE person_id = (SELECT id FROM people WHERE name = 'Steve Carell');

now (i think) we can get a tre's selects from different tables

SELECT title FROM shows WHERE id IN (SELECT show_id FROM stars WHERE person_id = (SELECT id FROM people WHERE name = 'Steve Carrel'));

the JOIN command get his content and 'merge' with other table;

SELECT * FROM shows JOIN genres ON shows.id = genres.show_id WHERE title = 'The Office';

SELECT title FROM people 
  JOIN stars ON people.id = stars.person_id 
  JOIN shows ON stars.show_id = shows.id
  WHERE name = 'Steve Carell';

you can select multiple tables with ,

SELECT title FROM people, stars, shows
  WHERE people.id = stars.person_id
  AND stars.show_id = shows.id
  AND name = 'Steve Carell';

you can search a not specific word but a LIKE word:
(this query is slow)
SELECT * FROM people WHERE  name LIKE 'Steve C%';

index is more eficient

Let's check how long the time of query is fast

SELECT * FROM shows WHERE title = 'The Office';

So lets make a index to title table

CREATE INDEX title_index ON shows (title);

but if we have a so much requires for server? for this we have a this commands:
BEGIN TRANSACTION
COMMIT 
ROLLBACK

db.execute("BEGIN TRANSACTION")
rows = db.execute("SELECT likes FROM posts WHERE id = ?", id);
likes = rows[0]["likes"]
db.execute("UPDATE posts SET likes = ? WHERE id = ?", likes + 1, id);
db.execute("COMMIT")

SQL injection warning
rows = db.execute(f"SELECT * FROM users WHERE username = 'malan@havard.edu'--' AND password = '{password}'") 
any code above this is fagile to SQL injection

sanitize your injections queries


seccond lesson
SELECT * FROM students;

SELECT student_name FROM students WHERE student_name LIKE "%Potter";

find the names and houses of students whose names begin with "H".

SELECT student_name, house FROM students WHERE student_name LIKE "H%";
(doet for my own)

Design Principles 
- Each table should be a collection of a single entity.
- For example, we should have a different table fo each of students, houses, an student-house assignments

the correct is:
-students table with id and name of student
-houses table with student_name and head collums
-assignments table with id, student_id, house_id

Design Principles
-Each piece of data should be stored in a sigle locaiton, and thereafter referred to by its ID ("primary key").
-For example, we should ensure every student adn house has an ID, then use those IDs in the house assignments table.
assignments table have a foregin key of houses and students

CREATE TABLE houses (
    id INTERGER NOT NULL,
    house TEXT NOT NULL,
    head TEXT NOT NULL,
    PRIMARY KEY(id)
    );

this is the best way why changes are more simply

INSERT INTO houses (house, head)
  VALUES('Gryffindor', 'McGonagall');

INSERT INTO houses (id, house, head)
  VALUES(2, 'Slytherin', 'Severus Snape');

he change the database with doned updates

SELECT COUNT(student_id)
FROM assignments
WHERE house_id = 
(
  SELECT id
  FROM houses
  WHERE house = 'Gryffindor'
);

the JOIN is best to use for this

SELECT * FROM assignments
JOIN houses ON houses.id = assignments.house_id;

SELECT COUNT(student_id) FROM assignments
JOIN houses ON houses.id = assignments.house_id
WHERE houses.house = 'Gryffindor';

we use the assignments collum to specify the new collum on JOIN table

SELECT house, COUNT(student_id)
FROM assignments
JOIN houses ON houses.id = assignments.house_id
GRUP BY house;
